// Duration represents musical note lengths.
#[derive(Copy, Clone)]
pub enum Duration {
    Whole,
    Half,
    Quarter,
    Eighth,
    Sixteenth,
    // A dotted note increases the note's duration by half of its original length.
    // For example, Dotted(4) is a dotted quarter note = 1/4 * 1.5
    Dotted(i16),
}

// Pitch represents musical pitches with associated frequencies in Hz.
// The values are in u32 for efficient conversion and embedded use.
#[derive(Copy, Clone, Debug, PartialEq)]
#[repr(u32)]
pub enum Pitch {
    Rest = 0,

    C0 = 16,
    CS0 = 17,
    D0 = 18,
    DS0 = 19,
    E0 = 20,
    F0 = 21,
    FS0 = 23,
    G0 = 24,
    GS0 = 26,
    A0 = 27,
    AS0 = 29,
    B0 = 31,
    C1 = 33,
    CS1 = 35,
    D1 = 37,
    DS1 = 39,
    E1 = 41,
    F1 = 43,
    FS1 = 46,
    G1 = 49,
    GS1 = 52,
    A1 = 55,
    AS1 = 58,
    B1 = 62,
    C2 = 65,
    CS2 = 69,
    D2 = 73,
    DS2 = 78,
    E2 = 82,
    F2 = 87,
    FS2 = 92,
    G2 = 98,
    GS2 = 103,
    A2 = 110,
    AS2 = 116,
    B2 = 123,
    C3 = 130,
    CS3 = 138,
    D3 = 146,
    DS3 = 155,
    E3 = 164,
    F3 = 174,
    FS3 = 185,
    G3 = 196,
    GS3 = 207,
    A3 = 220,
    AS3 = 233,
    B3 = 246,
    C4 = 261,
    CS4 = 277,
    D4 = 293,
    DS4 = 311,
    E4 = 329,
    F4 = 349,
    FS4 = 370,
    G4 = 392,
    GS4 = 415,
    A4 = 440,
    AS4 = 466,
    B4 = 494,
    C5 = 523,
    CS5 = 554,
    D5 = 587,
    DS5 = 622,
    E5 = 659,
    F5 = 698,
    FS5 = 740,
    G5 = 784,
    GS5 = 831,
    A5 = 880,
    AS5 = 932,
    B5 = 988,
    C6 = 1046,
    CS6 = 1109,
    D6 = 1175,
    DS6 = 1245,
    E6 = 1319,
    F6 = 1397,
    FS6 = 1480,
    G6 = 1568,
    GS6 = 1661,
    A6 = 1760,
    AS6 = 1865,
    B6 = 1976,
    C7 = 2093,
    CS7 = 2217,
    D7 = 2349,
    DS7 = 2489,
    E7 = 2637,
    F7 = 2794,
    FS7 = 2960,
    G7 = 3136,
    GS7 = 3322,
    A7 = 3520,
    AS7 = 3729,
    B7 = 3951,
    C8 = 4186,
    CS8 = 4435,
    D8 = 4699,
    DS8 = 4978,
    E8 = 5274,
    F8 = 5588,
    FS8 = 5920,
    G8 = 6272,
    GS8 = 6645,
    A8 = 7040,
    AS8 = 7459,
    B8 = 7902,
}

impl Pitch {
    /// Returns the accurate frequency (Hz) as `f64`.
    /// Useful when precise audio playback or calculations are needed.
    pub fn freq_f64(self) -> f64 {
        match self {
            Self::Rest => 0.0,
            Self::C0 => 16.35,
            Self::CS0 => 17.32,
            Self::D0 => 18.35,
            Self::DS0 => 19.45,
            Self::E0 => 20.60,
            Self::F0 => 21.83,
            Self::FS0 => 23.12,
            Self::G0 => 24.50,
            Self::GS0 => 25.96,
            Self::A0 => 27.50,
            Self::AS0 => 29.14,
            Self::B0 => 30.87,
            Self::C1 => 32.70,
            Self::CS1 => 34.65,
            Self::D1 => 36.71,
            Self::DS1 => 38.89,
            Self::E1 => 41.20,
            Self::F1 => 43.65,
            Self::FS1 => 46.25,
            Self::G1 => 49.00,
            Self::GS1 => 51.91,
            Self::A1 => 55.00,
            Self::AS1 => 58.27,
            Self::B1 => 61.74,
            Self::C2 => 65.41,
            Self::CS2 => 69.30,
            Self::D2 => 73.42,
            Self::DS2 => 77.78,
            Self::E2 => 82.41,
            Self::F2 => 87.31,
            Self::FS2 => 92.50,
            Self::G2 => 98.00,
            Self::GS2 => 103.83,
            Self::A2 => 110.00,
            Self::AS2 => 116.54,
            Self::B2 => 123.47,
            Self::C3 => 130.81,
            Self::CS3 => 138.59,
            Self::D3 => 146.83,
            Self::DS3 => 155.56,
            Self::E3 => 164.81,
            Self::F3 => 174.61,
            Self::FS3 => 185.00,
            Self::G3 => 196.00,
            Self::GS3 => 207.65,
            Self::A3 => 220.00,
            Self::AS3 => 233.08,
            Self::B3 => 246.94,
            Self::C4 => 261.63,
            Self::CS4 => 277.18,
            Self::D4 => 293.66,
            Self::DS4 => 311.13,
            Self::E4 => 329.63,
            Self::F4 => 349.23,
            Self::FS4 => 369.99,
            Self::G4 => 392.00,
            Self::GS4 => 415.30,
            Self::A4 => 440.00,
            Self::AS4 => 466.16,
            Self::B4 => 493.88,
            Self::C5 => 523.25,
            Self::CS5 => 554.37,
            Self::D5 => 587.33,
            Self::DS5 => 622.25,
            Self::E5 => 659.25,
            Self::F5 => 698.46,
            Self::FS5 => 739.99,
            Self::G5 => 783.99,
            Self::GS5 => 830.61,
            Self::A5 => 880.00,
            Self::AS5 => 932.33,
            Self::B5 => 987.77,
            Self::C6 => 1046.50,
            Self::CS6 => 1108.73,
            Self::D6 => 1174.66,
            Self::DS6 => 1244.51,
            Self::E6 => 1318.51,
            Self::F6 => 1396.91,
            Self::FS6 => 1479.98,
            Self::G6 => 1567.98,
            Self::GS6 => 1661.22,
            Self::A6 => 1760.00,
            Self::AS6 => 1864.66,
            Self::B6 => 1975.53,
            Self::C7 => 2093.00,
            Self::CS7 => 2217.46,
            Self::D7 => 2349.32,
            Self::DS7 => 2489.02,
            Self::E7 => 2637.02,
            Self::F7 => 2793.83,
            Self::FS7 => 2959.96,
            Self::G7 => 3135.96,
            Self::GS7 => 3322.44,
            Self::A7 => 3520.00,
            Self::AS7 => 3729.31,
            Self::B7 => 3951.07,
            Self::C8 => 4186.01,
            Self::CS8 => 4434.92,
            Self::D8 => 4698.63,
            Self::DS8 => 4978.03,
            Self::E8 => 5274.04,
            Self::F8 => 5587.65,
            Self::FS8 => 5919.91,
            Self::G8 => 6271.93,
            Self::GS8 => 6644.88,
            Self::A8 => 7040.00,
            Self::AS8 => 7458.62,
            Self::B8 => 7902.13,
        }
    }

    /// Returns the frequency as a `u32` value using the enum's `repr(u32)`.
    /// This is useful in constrained environments where only integer math is desired.
    pub fn freq_u32(&self) -> u32 {
        *self as u32
    }
}
